[Ll]ibrary/
[Tt]emp/
[Oo]bj/
/[Uu]ser[Ss]ettings/
test_Data/

# Autogenerated VS/MD solution and project files
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj

# Unity3D generated meta files
*.pidb.meta

# Unity3D Generated File On Crash Reports
sysinfo.txt

# Unity UIToolKit (UIElements)
/UIElementsSchema/

# Rider
.idea/
*.csproj.DotSettings

# ============ #
# OS generated #
# ============ #
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
/Assets/Application/AssetBundle
/Assets/Application/AssetBundle.meta
!/Assets/Application/AssetBundle/Application
!/Assets/Application/AssetBundle/Application.meta
/Assets/StreamingAssets/Beast/Windows
/Assets/StreamingAssets/Beast/Windows.meta
/Assets/StreamingAssets/Beast/OSX
/Assets/StreamingAssets/Beast/OSX.meta
/Assets/StreamingAssets/Beast/Android
/Assets/StreamingAssets/Beast/Android.meta
/Assets/StreamingAssets/Beast/iOS
/Assets/StreamingAssets/Beast/iOS.meta
/TemporaryDataFolder
/DataFolder
/.vs
/.vscode
/Logs
/BEAST
/AssetBundle
/AssetBundle_Release
/*.apk
/*.aab
/Build/Android/build.log
/Xcode
/Recordings
/**/lib_burst_generated.txt


# ============ #
# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control
# ============ #
# fastlane specific
/fastlane/report.xml

# deliver temporary files
/fastlane/Preview.html

# snapshot generated screenshots
/fastlane/screenshots

# scan temporary files
/fastlane/test_output



# ============ #
# Ruby (fastlane用)
# https://github.com/github/gitignore/blob/main/Ruby.gitignore
# ============ #
*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/

# Used by dotenv library to load environment variables.
# .env

# Ignore Byebug command history file.
.byebug_history

## Specific to RubyMotion:
.dat*
.repl_history
build/
*.bridgesupport
build-iPhoneOS/
build-iPhoneSimulator/

## Specific to RubyMotion (use of CocoaPods):
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# vendor/Pods/

## Documentation cache and generated files:
/.yardoc/
/_yardoc/
/doc/
/rdoc/

## Environment normalization:
/.bundle/
/vendor/bundle
/lib/bundler/man/

# for a library or gem, you might want to ignore these files since the code is
# intended to run in multiple environments; otherwise, check them in:
# Gemfile.lock
# .ruby-version
# .ruby-gemset

# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:
.rvmrc

# Used by RuboCop. Remote config files pulled in from inherit_from directive.
# .rubocop-https?--*



# ============ #
# Others - for Beast Project
# ============ #
# MessagePackで使用するための、自動生成コード
# /Assets/Application/Scripts/Runtime/_00_Framework/MessagePackHelper/Generated/
# /Assets/Application/Scripts/Runtime/_00_Framework/MessagePackHelper/Generated.meta

# 一時ファイル置き場
/Assets/Application/Temporary/
/Assets/Application/Temporary.meta

# テストコード実行時に生成されるダミーデータ置き場
/Assets/Application/Resources/Beast.Tests/
/Assets/Application/Resources/Beast.Tests.meta

# チュートリアルで必要なアセットバンドル
/AssetBundles_Tutorial_Windows.txt
/AssetBundles_Tutorial_OSX.txt
/AssetBundles_Tutorial_Android.txt
/AssetBundles_Tutorial_iOS.txt
/AssetBundlePaths_Tutorial.txt


# ビルド結果
/Builds/

# bashでのビルド用環境変数ファイル
/.env

# iOS Provisioning Profile
*.mobileprovision

# [Unity] Android Library
/[Aa]ssets/**/*.androidlib/**/*.meta

# [Unity] iOS Plugins
/[Aa]ssets/**/*.bundle/**/*.meta
/[Aa]ssets/**/*.framework/**/*.meta
/[Aa]ssets/**/*.xcframework/**/*.meta

#Jenkinsテストで無視するもの
/TestBuild
